name: Chroma Release

on:
  push:
    tags:
      - "*"
    branches:
      - main
      - feat/303-docker-hub-test

env:
  GCR_URI: ghcr.io
  GCR_IMAGE_NAME: "buddhikajay/chroma"
  DOCKER_HUB_IMAGE_NAME: "buddhikajay/chroma"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions: write-all
    #      id-token: write
    #      contents: read
    #      deployments: write
    #      packages: write
    #      pull-requests: read
    #      statuses: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.10"
      # - name: Install Client Dev Dependencies
      #   run: python -m pip install -r requirements_dev.txt
      # - name: Build Client
      #   run: python -m build
      # - name: Test Client Package
      #   run: bin/test-package.sh dist/*.tar.gz
      # Log in to GitHub Container registry
      # - name: Log in to GitHub Container registry
      #   uses: docker/login-action@v2.1.0
      #   with:
      #     registry: ${{ env.GCR_URI }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      # # Log in to Docker Hub
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Install setuptools_scm
      #   run: python -m pip install setuptools_scm
      - name: Get Docker Tag
        id: tag
        run: echo "tag_name=$(bin/version)" >> $GITHUB_OUTPUT
      # - name: Build and push release Docker image
      #   uses: docker/build-push-action@v3.2.0
      #   with:
      #     context: .
      #     push: true
      #     tags: |
      #       ${{ format('{0}:{1}', env.DOCKER_HUB_IMAGE_NAME, steps.tag.outputs.tag_name)}}
      #       ${{ format('{0}/{1}:{2}', env.GCR_URI, env.GCR_IMAGE_NAME, steps.tag.outputs.tag_name)}}
      #       ${{ startsWith(github.ref, 'refs/tags/') && format('{0}:latest', env.DOCKER_HUB_IMAGE_NAME) }}
      #       ${{ startsWith(github.ref, 'refs/tags/') && format('{0}/{1}:latest', env.GCR_URI, env.GCR_IMAGE_NAME)}}"
      - name: Install setuptools_scm
        # run: echo "$env.DOCKER_HUB_IMAGE_NAME:$steps.tag.outputs.tag_name"
        run: echo "${{format('{0}:{1}, {2}/{3}:{4}', env.DOCKER_HUB_IMAGE_NAME, steps.tag.outputs.tag_name, env.GCR_URI, env.GCR_IMAGE_NAME, steps.tag.outputs.tag_name)}}${{startsWith(github.ref, 'refs/tags/') && format(', {0}:latest, {1}/{2}:latest', env.DOCKER_HUB_IMAGE_NAME, env.GCR_URI, env.GCR_IMAGE_NAME)}}"
      # - name: Get Release Version
      #   id: version
      #   run: echo "version=$(python -m setuptools_scm)" >> $GITHUB_OUTPUT
      # - name: Get current date
      #   id: builddate
      #   run: echo "builddate=$(date +'%Y-%m-%dT%H:%M')" >> $GITHUB_OUTPUT
      # - name: Publish to Test PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
      #     repository_url: https://test.pypi.org/legacy/
      # - name: Publish to PyPI
      #   if: startsWith(github.ref, 'refs/tags')
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      # - name: Login to AWS
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     role-to-assume: arn:aws:iam::369178033109:role/github-action-generate-cf-template
      #     aws-region: us-east-1
      # - name: Generate CloudFormation template
      #   id: generate-cf
      #   if: "startsWith(github.ref, 'refs/tags/')"
      #   run: "pip install boto3 && python bin/generate_cloudformation.py"
      # - name: Release Tagged Version
      #   uses: ncipollo/release-action@v1.11.1
      #   if: "startsWith(github.ref, 'refs/tags/')"
      #   with:
      #     body: |
      #       Version: `${{steps.version.outputs.version}}`
      #       Git ref: `${{github.ref}}`
      #       Build Date: `${{steps.builddate.outputs.builddate}}`
      #       PIP Package: `chroma-${{steps.version.outputs.version}}.tar.gz`
      #       Docker Image: `${{steps.tag.outputs.tag_name}}`
      #     artifacts: "dist/chroma-${{steps.version.outputs.version}}.tar.gz"
      #     prerelease: true
      #     generateReleaseNotes: true
      # - name: Update Tag
      #   uses: richardsimko/update-tag@v1.0.5
      #   if: "!startsWith(github.ref, 'refs/tags/')"
      #   with:
      #     tag_name: latest
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: Release Latest
      #   uses: ncipollo/release-action@v1.11.1
      #   if: "!startsWith(github.ref, 'refs/tags/')"
      #   with:
      #     tag: "latest"
      #     name: "Latest"
      #     body: |
      #       Version: `${{steps.version.outputs.version}}`
      #       Git ref: `${{github.ref}}`
      #       Build Date: `${{steps.builddate.outputs.builddate}}`
      #       PIP Package: `chroma-${{steps.version.outputs.version}}.tar.gz`
      #       Docker Image: `${{steps.tag.outputs.tag_name}}`
      #     artifacts: "dist/chroma-${{steps.version.outputs.version}}.tar.gz"
      #     allowUpdates: true
      #     prerelease: true
